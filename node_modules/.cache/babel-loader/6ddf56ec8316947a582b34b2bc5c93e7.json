{"ast":null,"code":"var _jsxFileName = \"/home/christian/Code/todo-made-in-react/src/StorageChangeAlert/withStorageListener.tsx\";\nimport React from \"react\";\nimport { localStorageKey } from \"../Storage/useLocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction withStorageListener(Component) {\n  return function ComponentWithListener(_ref) {\n    let {\n      sincronizeTodos\n    } = _ref;\n    const [storageChange, setStorageChange] = React.useState(false);\n    React.useEffect(() => {\n      const eventAction = event => {\n        if (event.key === localStorageKey) {\n          setStorageChange(true);\n        }\n      };\n\n      window.addEventListener('storage', eventAction);\n      return;\n    });\n\n    const toggleAction = () => {\n      sincronizeTodos();\n      setStorageChange(false);\n    };\n\n    return /*#__PURE__*/_jsxDEV(Component, {\n      show: storageChange,\n      toggle: toggleAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this);\n  };\n}\n\nexport { withStorageListener };","map":{"version":3,"names":["React","localStorageKey","withStorageListener","Component","ComponentWithListener","sincronizeTodos","storageChange","setStorageChange","useState","useEffect","eventAction","event","key","window","addEventListener","toggleAction"],"sources":["/home/christian/Code/todo-made-in-react/src/StorageChangeAlert/withStorageListener.tsx"],"sourcesContent":["import React, {ReactElement} from \"react\";\nimport {localStorageKey} from \"../Storage/useLocalStorage\";\nimport {ToggleComponent} from \"./StorageChangeAlert\";\n\ninterface Reloader {\n    sincronizeTodos: () => void,\n}\n\nfunction withStorageListener(Component : (props : ToggleComponent) => ReactElement) {\n    return function ComponentWithListener({sincronizeTodos} : Reloader) {\n        const [storageChange, setStorageChange] = React.useState(false);\n\n        React.useEffect( () => {\n\n                const eventAction = (event : Event) => {\n                    if((event as StorageEvent).key === localStorageKey){\n                        setStorageChange(true);\n                    }\n                };\n\n                window.addEventListener('storage', eventAction);\n                return \n            }\n        )\n\n        const toggleAction = () => {\n            sincronizeTodos();\n            setStorageChange(false)\n        }\n        return (\n            <Component\n                show={storageChange}\n                toggle={toggleAction}\n            />\n        );\n    }\n}\n\nexport {withStorageListener};\n\nexport type {ToggleComponent};"],"mappings":";AAAA,OAAOA,KAAP,MAAkC,OAAlC;AACA,SAAQC,eAAR,QAA8B,4BAA9B;;;AAOA,SAASC,mBAAT,CAA6BC,SAA7B,EAAoF;EAChF,OAAO,SAASC,qBAAT,OAA6D;IAAA,IAA9B;MAACC;IAAD,CAA8B;IAChE,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,KAAK,CAACQ,QAAN,CAAe,KAAf,CAA1C;IAEAR,KAAK,CAACS,SAAN,CAAiB,MAAM;MAEf,MAAMC,WAAW,GAAIC,KAAD,IAAmB;QACnC,IAAIA,KAAD,CAAwBC,GAAxB,KAAgCX,eAAnC,EAAmD;UAC/CM,gBAAgB,CAAC,IAAD,CAAhB;QACH;MACJ,CAJD;;MAMAM,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCJ,WAAnC;MACA;IACH,CAVL;;IAaA,MAAMK,YAAY,GAAG,MAAM;MACvBV,eAAe;MACfE,gBAAgB,CAAC,KAAD,CAAhB;IACH,CAHD;;IAIA,oBACI,QAAC,SAAD;MACI,IAAI,EAAED,aADV;MAEI,MAAM,EAAES;IAFZ;MAAA;MAAA;MAAA;IAAA,QADJ;EAMH,CA1BD;AA2BH;;AAED,SAAQb,mBAAR"},"metadata":{},"sourceType":"module"}